/*
 * CynSMSAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.cynojine.sms.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.cynojine.sms.*;
import com.cynojine.sms.models.*;
import com.cynojine.sms.exceptions.*;
import com.cynojine.sms.http.client.HttpClient;
import com.cynojine.sms.http.client.HttpContext;
import com.cynojine.sms.http.request.HttpRequest;
import com.cynojine.sms.http.response.HttpResponse;
import com.cynojine.sms.http.response.HttpStringResponse;
import com.cynojine.sms.http.client.APICallBack;
import com.cynojine.sms.controllers.syncwrapper.APICallBackCatcher;

public class APIController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static APIController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the APIController class 
     */
    public static APIController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new APIController();
                }
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    apiKey    Required parameter: set your API_KEY from http://sms.cynojine.com/sms-api/info (user panel)
     * @param    to    Required parameter: the number we are sending to - Any phone number
     * @param    sms    Required parameter: SMS Body
     * @param    from    Required parameter: Change the from number below. It can be a valid phone number or a String
     * @return    Returns the String response from the API call 
     */
    public String createSendSMS(
                final String apiKey,
                final String to,
                final String sms,
                final String from
    ) throws Throwable {

        HttpRequest _request = _buildCreateSendSMSRequest(apiKey, to, sms, from);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateSendSMSResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    apiKey    Required parameter: set your API_KEY from http://sms.cynojine.com/sms-api/info (user panel)
     * @param    to    Required parameter: the number we are sending to - Any phone number
     * @param    sms    Required parameter: SMS Body
     * @param    from    Required parameter: Change the from number below. It can be a valid phone number or a String
     */
    public void createSendSMSAsync(
                final String apiKey,
                final String to,
                final String sms,
                final String from,
                final APICallBack<String> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateSendSMSRequest(apiKey, to, sms, from);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            String returnValue = _handleCreateSendSMSResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createSendSMS
     */
    private HttpRequest _buildCreateSendSMSRequest(
                final String apiKey,
                final String to,
                final String sms,
                final String from) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api?action=send-sms");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("api key", apiKey);
        _queryParameters.put("to", to);
        _queryParameters.put("sms", sms);
        _queryParameters.put("from", from);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createSendSMS
     * @return An object of type String
     */
    private String _handleCreateSendSMSResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _result = ((HttpStringResponse)_response).getBody();
        return _result;
    }

    /**
     * Checking SMS Balance
     * @param    GetBALANCECHECKInput    Object containing request parameters
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     */
    public void getBALANCECHECK(
                final GetBALANCECHECKInput input,
                final Map<String, Object> queryParameters
    ) throws Throwable {

        HttpRequest _request = _buildGetBALANCECHECKRequest(input, queryParameters);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleGetBALANCECHECKResponse(_context);
    }

    /**
     * Checking SMS Balance
     * @param    GetBALANCECHECKInput    Object containing request parameters
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
     */
    public void getBALANCECHECKAsync(
                final GetBALANCECHECKInput input,
                final Map<String, Object> queryParameters,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetBALANCECHECKRequest(input, queryParameters);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleGetBALANCECHECKResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getBALANCECHECK
     */
    private HttpRequest _buildGetBALANCECHECKRequest(
                final GetBALANCECHECKInput input,
                final Map<String, Object> queryParameters) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/api?action=check-balance");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("api_key", input.getApiKey());
        _queryParameters.put("response", input.getResponse());
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);

        //append optional parameters to the query
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getBALANCECHECK
     */
    private void _handleGetBALANCECHECKResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

}
